> print("Hello World!")
print("Hello World!")
setwd("C:/Users/User/Documents/GitHub/ea-2022-1-cc51")
#Cargando el dataset de reservas de hotel
hotel_data <- read.csv("data/hotel_bookings_miss.csv", header = TRUE, sep = ",",stringsAsFactors = FALSE)
#Cargar solo los datos unicos
hotel_data_pre <- unique(hotel_data)
#Convertir todos los datos no utilizables a NA
hotel_data_pre[hotel_data_pre == "NULL"] <- NA
hotel_data_pre[hotel_data_pre == ""] <- NA
#Eliminando redundancia (Undefined es lo mismo que SC segun documentacion)
hotel_data_pre[hotel_data_pre == "Undefined"] <- "SC"
#Convertir datos de tiempo a Date
hotel_data_pre$reservation_status_date <- as.Date(hotel_data_pre$reservation_status_date,"%m/%d/%Y")
#Eliminando la columna company porque mas de el 90% de los datos tenian valores inutilizables
#Ademas, esta columna no afecta a nuestros casos de analisis
hotel_data_pre2 <- subset(hotel_data_pre,select = -company)
#Convertir datos inutilizables de lead_time al promedio de los normales
hotel_data_pre2$lead_time <- ifelse(is.na(hotel_data_pre2$lead_time), mean(hotel_data_pre2$lead_time, na.rm = TRUE), hotel_data_pre2$lead_time)
#Funciones para cambiar valores NA a valores aleatorios que si existen
rand.valor <- function(x) {
faltantes <- is.na(x)
tot.faltantes <- sum(faltantes)
x.obs <- x[!faltantes]
valorado <- x
valorado[faltantes] <- sample(x.obs, tot.faltantes, replace = TRUE)
return (valorado)
}
random.df <- function(df) {
nombres <- names(df)
for (nombre in nombres) {
df[nombre] <- rand.valor(df[,nombre])
}
df
}
#Asignando valores aleatorios a los NA del dataframe
hotel_data_pre2 <- random.df(hotel_data_pre2)
#Tranformando variables a factores
hotel_data_pre2$hotel <- factor(hotel_data_pre2$hotel)#
hotel_data_pre2$agent <- factor(hotel_data_pre2$agent)#
hotel_data_pre2$is_canceled <- factor(hotel_data_pre2$is_canceled)#
hotel_data_pre2$is_repeated_guest <- factor(hotel_data_pre2$is_repeated_guest)#
hotel_data_pre2$arrival_date_month <- factor(hotel_data_pre2$arrival_date_month)#
hotel_data_pre2$meal <- factor(hotel_data_pre2$meal)#
hotel_data_pre2$country <- factor(hotel_data_pre2$country)#
hotel_data_pre2$market_segment <- factor(hotel_data_pre2$market_segment)#
hotel_data_pre2$distribution_channel <- factor(hotel_data_pre2$distribution_channel)#
hotel_data_pre2$reserved_room_type <- factor(hotel_data_pre2$reserved_room_type)#
hotel_data_pre2$assigned_room_type <- factor(hotel_data_pre2$assigned_room_type)#
hotel_data_pre2$deposit_type <- factor(hotel_data_pre2$deposit_type)#
hotel_data_pre2$customer_type <- factor(hotel_data_pre2$customer_type)#
hotel_data_pre2$reservation_status <- factor(hotel_data_pre2$reservation_status)#
str(hotel_data_pre2)
rm.outliers <- function(t, x) {
i = grep(x,colnames(t))
while(length(boxplot.stats(t[,i])$out) > 1) {
t <- t[!t[,i] %in% boxplot.stats(t[,i])$out,]
}
return (t)
}
hotel_data_pre3 <- hotel_data_pre2
hotel_data_pre3 <- rm.outliers(hotel_data_pre3, "stays_in_weekend_nights")
hotel_data_pre3 <- hotel_data_pre3[hotel_data_pre3$adr < 1000,]
hotel_data_pre3 <- hotel_data_pre3[hotel_data_pre3$lead_time < 700,]
hotel_data_pre3 <- hotel_data_pre3[hotel_data_pre3$adults < 10 & hotel_data_pre3$adults > 0,]
hotel_data_pre3 <- hotel_data_pre3[hotel_data_pre3$children < 9,]
hotel_data_pre3 <- hotel_data_pre3[hotel_data_pre3$babies < 8,]
nrow(hotel_data_pre2) - nrow(hotel_data_pre3)
barplot(
table(hotel_data_pre3$required_car_parking_spaces),
col = c("#0072B2"),
main = "Estacionamientos solicitados por reserva",
xlab = "Cantidad de estacionamientos solicitados",
ylab = "Frecuencia",
)
table(hotel_data_pre3$required_car_parking_spaces)
hotel_data_pre3_cancelados <- c(hotel_data_pre3[hotel_data_pre3$is_canceled=="1", hotel_data_pre3$arrival_date_month <- ordered(hotel_data_pre3$arrival_date_month, levels = month.name),])
table(hotel_data_pre3_cancelados$is_canceled, hotel_data_pre3_cancelados$arrival_date_month)
